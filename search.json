[{"path":"https://jolars.github.io/SLOPE/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (https://www.contributor-covenant.org), version 1.0.0, available https://contributor-covenant.org/version/1/0/0/.","code":""},{"path":"https://jolars.github.io/SLOPE/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://jolars.github.io/SLOPE/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://jolars.github.io/SLOPE/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://jolars.github.io/SLOPE/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://jolars.github.io/SLOPE/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://jolars.github.io/SLOPE/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://jolars.github.io/SLOPE/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://jolars.github.io/SLOPE/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://jolars.github.io/SLOPE/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://jolars.github.io/SLOPE/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://jolars.github.io/SLOPE/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://jolars.github.io/SLOPE/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://jolars.github.io/SLOPE/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://jolars.github.io/SLOPE/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://jolars.github.io/SLOPE/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://jolars.github.io/SLOPE/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://jolars.github.io/SLOPE/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://jolars.github.io/SLOPE/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://jolars.github.io/SLOPE/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://jolars.github.io/SLOPE/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://jolars.github.io/SLOPE/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"Generalized Linear Models Regularized with the Sorted L1-Norm Copyright (C) 2020 Johan Larsson  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. SLOPE Copyright (C) 2020 Johan Larsson, Jonas Wallin, Malgorzata Bogdan, Ewout van den Berg, Chiara Sabatti, Emmanuel Candes, Evan Patterson, Weijie Su This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://jolars.github.io/SLOPE/articles/introduction.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"An introduction to SLOPE","text":"functions package solves problems type \\[ \\mathrm{minimize}\\left\\{f(\\beta) + J(\\beta; \\alpha,\\lambda) \\right\\}, \\] second part objective sorted L1-norm \\[   J(\\beta; \\alpha,\\lambda) =     \\alpha \\sum_{j=1}^p \\lambda_j \\lvert \\beta \\rvert_{(j)}, \\] \\(\\alpha \\\\mathbb{R}_{+}\\), \\(\\lambda \\\\mathbb{R}_+^p\\) \\((j)\\) represents rank magnitudes \\(\\beta\\) descending order. \\(\\lambda\\) controls shape penalty sequence, needs non-increasing, \\(\\alpha\\) controls scale sequence. Solving problem called SLOPE (Sorted L-One Penalized Estimation) (Bogdan et al. 2015). problem, \\(f(\\beta)\\) smooth convex objective, package far includes four models family generalized linear models: Gaussian regression, binomial regression, multinomial regression, Poisson regression. SLOPE extension lasso (Tibshirani 1996) ability lead sparse solutions given sufficiently strong regularization. also easy see SLOPE reduces lasso elements \\(\\lambda\\) vector equal. lasso, however, difficulties correlated predictors (Jia Yu 2010) case SLOPE, handles issue clustering predictors magnitude. effect related consecutive differences \\(\\lambda\\) vector: larger steps, clustering behavior SLOPE exhibits.","code":""},{"path":"https://jolars.github.io/SLOPE/articles/introduction.html","id":"an-example","dir":"Articles","previous_headings":"","what":"An example","title":"An introduction to SLOPE","text":"following example, use heart data set, response cardiac event. (package contains several data sets exemplify modeling. Please see examples SLOPE().) main function package SLOPE(), , less, serves interface code written C++. many arguments function relate either construction regularization path penalty (\\(\\lambda\\)) sequence used. use option lambda = \"bh\", used BH method detailed Bogdan et al. (2015) select sequence. (Note also possible manually insert sequence.) default print method gives summary regularization path usually informative study plot path. Regularization path binomial regression model fit heart data set.","code":"library(SLOPE)  x <- heart$x y <- heart$y  fit <- SLOPE(x, y, family = \"binomial\", lambda = \"bh\") plot(fit)"},{"path":"https://jolars.github.io/SLOPE/articles/introduction.html","id":"cross-validation","dir":"Articles","previous_headings":"","what":"Cross-validation","title":"An introduction to SLOPE","text":"determine strength regularization, almost always necessary tune \\(\\lambda\\) sequence using resampling. package features two methods : specification use caret package via function caretSLOPE() trainSLOPE(). former facilitate easier comparison SLOPE methods well multitude options resampling measuring performance, allow sparse predictor matrices. give example trainSLOPE() . , plot method offers best summary. Model tuning results Gaussian SLOPE bodyfat dataset. Printing resulting object display optimum values","code":"set.seed(924)  x <- bodyfat$x y <- bodyfat$y  tune <- trainSLOPE(   x,   y,   q = c(0.1, 0.2),   number = 5,   solver = \"admm\",   repeats = 2 ) plot(tune, measure = \"mae\") # plot mean absolute error tune #>  #> Call: #> trainSLOPE(x = x, y = y, q = c(0.1, 0.2), number = 5, repeats = 2,  #>     solver = \"admm\") #>  #> Optimum values: #>     q       alpha measure      mean       se        lo        hi #> 1 0.1 0.001772065     mae  3.613638 0.131824  3.315431  3.911845 #> 2 0.1 0.001772065     mse 19.536120 1.126976 16.986724 22.085515"},{"path":"https://jolars.github.io/SLOPE/articles/introduction.html","id":"false-discovery-rate","dir":"Articles","previous_headings":"","what":"False discovery rate","title":"An introduction to SLOPE","text":"assumptions orthonormality, SLOPE shown control false discovery rate (FDR) non-zero coefficients (feature weights) model (Bogdan et al. 2015). many ways analogous Benjamini–Hochberg procedure multiple comparisons. Let’s set simple experiment see SLOPE controls FDR. randomly generate data sets various proportions true signals. Gaussian design independently identically distributed columns \\(X\\), SLOPE asymptotically control FDR level given shape parameter \\(q\\), set 0.1 example. Control false discovery rate using SLOPE. SLOPE seems control FDR roughly specified level.","code":"# proportion of real signals q <- seq(0.05, 0.5, length.out = 20) fdr <- double(length(q)) set.seed(1)  for (i in seq_along(q)) {   n <- 1000   p <- n / 2   alpha <- 1   problem <- SLOPE:::randomProblem(n, p, q = q[i], alpha = alpha)    x <- problem$x   y <- problem$y   signals <- problem$nonzero    fit <- SLOPE(x,     y,     lambda = \"gaussian\",     solver = \"admm\",     q = 0.1,     alpha = alpha / sqrt(n)   )    selected_slope <- which(fit$nonzeros)   V <- length(setdiff(selected_slope, signals))   R <- length(selected_slope)   fdr[i] <- V / R }  library(ggplot2)  ggplot(mapping = aes(q, fdr)) +   geom_hline(yintercept = 0.1, lty = 3) +   geom_line() +   geom_point() +   theme_minimal() +   labs(y = \"False Discovery Rate\")"},{"path":[]},{"path":"https://jolars.github.io/SLOPE/articles/prox-algs.html","id":"the-proximal-operator-in-slope","dir":"Articles","previous_headings":"","what":"The Proximal Operator in SLOPE","title":"Proximal Operator Algorithms","text":"proximal operator sorted L1 norm, penalty used SLOPE, defined \\[   \\operatorname{prox}_J (v) =     \\operatorname*{arg\\,min}_x\\left(       J(x; \\lambda) + \\frac 1 2 \\lVert x - v \\rVert_2^2     \\right) \\] \\(J(x; \\lambda) = \\sum_{j=1}^p \\lambda_j |\\beta_{(j)}|\\) sorted L1 norm, \\[|\\beta_{(1)}| \\geq |\\beta_{(2)} \\geq \\cdots \\geq |\\beta_{(p)}.\\]","code":""},{"path":"https://jolars.github.io/SLOPE/articles/prox-algs.html","id":"algorithms","dir":"Articles","previous_headings":"The Proximal Operator in SLOPE","what":"Algorithms","title":"Proximal Operator Algorithms","text":"several methods solving proximal operator provide benchmarks methods. Note results almost entirely academic nature added serve reference others interested working SLOPE particularly might interested improving performance algorithms. First, load packages need,. setup run benchmarks, letting p length vector used operator. Finally, summarize results figure . Comparison execution times PAVA algorithm stack-based algorithm solving SLOPE prox. can see, stack-based algorithm appears perform much better PAVA one .","code":"library(SLOPE) library(tidyr) library(dplyr) library(bench) res <- expand_grid(   p = seq(10, 10000, length.out = 10),   i = 1:20,   method = c(\"stack\", \"pava\"),   time = NA )  set.seed(2254)  for (i in seq_len(nrow(res))) {   p <- res$p[i]    x <- rnorm(p)   lambda <- sort(runif(p), decreasing = TRUE)    time <- bench_time(sortedL1Prox(x, lambda, res$method[i]))    res$time[i] <- time[[\"real\"]] * 1e3 # milliseconds } library(ggplot2) library(scales)  ggplot(res, aes(p, time, fill = method, col = method)) +   stat_summary(     geom = \"ribbon\",     fun.data = mean_se,     alpha = 0.2,     col = \"transparent\"   ) +   stat_summary(geom = \"line\", fun = mean) +   scale_y_log10() +   labs(y = \"Time (milliseconds)\", x = expression(p))"},{"path":"https://jolars.github.io/SLOPE/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Johan Larsson. Author, maintainer. Jonas Wallin. Author. Malgorzata Bogdan. Author. Ewout van den Berg. Author. Chiara Sabatti. Author. Emmanuel Candes. Author. Evan Patterson. Author. Weijie Su. Author. Jakub Kała. Author. Krystyna Grzesiak. Author. Michal Burdukiewicz. Author. Jerome Friedman. Contributor.            code adapted 'glmnet' Trevor Hastie. Contributor.            code adapted 'glmnet' Rob Tibshirani. Contributor.            code adapted 'glmnet' Balasubramanian Narasimhan. Contributor.            code adapted 'glmnet' Noah Simon. Contributor.            code adapted 'glmnet' Junyang Qian. Contributor.            code adapted 'glmnet' Akarsh Goyal. Contributor.","code":""},{"path":"https://jolars.github.io/SLOPE/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Larsson J, Wallin J, Bogdan M, van den Berg E, Sabatti C, Candes E, Patterson E, Su W, Kała J, Grzesiak K, Burdukiewicz M (2024). SLOPE: Sorted L1 Penalized Estimation. R package version 0.5.2, https://CRAN.R-project.org/package=SLOPE. Bogdan M, van den Berg E, Sabatti C, Su W, Candès E (2015). “SLOPE – Adaptive Variable Selection via Convex Optimization.” annals applied statistics, 9(3), 1103–1140. ISSN 1932-6157, doi:10.1214/15-AOAS842.","code":"@Manual{,   title = {{SLOPE}: Sorted L1 Penalized Estimation},   author = {Johan Larsson and Jonas Wallin and Malgorzata Bogdan and Ewout {van den Berg} and Chiara Sabatti and Emmanuel Candes and Evan Patterson and Weijie Su and Jakub Kała and Krystyna Grzesiak and Michal Burdukiewicz},   year = {2024},   note = {R package version 0.5.2},   url = {https://CRAN.R-project.org/package=SLOPE}, } @Article{,   title = {{{SLOPE}} -- Adaptive Variable Selection via Convex Optimization},   author = {Małgorzata Bogdan and Ewout {van den Berg} and Chiara Sabatti and Weijie Su and Emmanuel J. Candès},   journal = {The annals of applied statistics},   volume = {9},   number = {3},   pages = {1103--1140},   year = {2015},   doi = {10.1214/15-AOAS842},   issn = {1932-6157}, }"},{"path":"https://jolars.github.io/SLOPE/index.html","id":"slope-","dir":"","previous_headings":"","what":"Sorted L1 Penalized Estimation","title":"Sorted L1 Penalized Estimation","text":"Efficient implementations Sorted L-One Penalized Estimation (SLOPE): generalized linear models regularized sorted L1-norm. support ordinary least-squares regression, binomial regression, multinomial regression, poisson regression, well dense sparse predictor matrices. addition, package features predictor screening rules enable efficient solutions high-dimensional problems.","code":""},{"path":"https://jolars.github.io/SLOPE/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Sorted L1 Penalized Estimation","text":"can install current stable release CRAN development version GitHub ","code":"install.packages(\"SLOPE\") # install.packages(\"remotes\") remotes::install_github(\"jolars/SLOPE\")"},{"path":"https://jolars.github.io/SLOPE/index.html","id":"versioning","dir":"","previous_headings":"","what":"Versioning","title":"Sorted L1 Penalized Estimation","text":"SLOPE uses semantic versioning.","code":""},{"path":"https://jolars.github.io/SLOPE/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of conduct","title":"Sorted L1 Penalized Estimation","text":"Please note ‘SLOPE’ project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://jolars.github.io/SLOPE/reference/SLOPE-package.html","id":null,"dir":"Reference","previous_headings":"","what":"SLOPE: Sorted L1 Penalized Estimation — SLOPE-package","title":"SLOPE: Sorted L1 Penalized Estimation — SLOPE-package","text":"Efficient implementations Sorted L-One Penalized Estimation (SLOPE): generalized linear models regularized sorted L1-norm (Bogdan et al. 2015). Supported models include ordinary least-squares regression, binomial regression, multinomial regression, Poisson regression. dense sparse predictor matrices supported. addition, package features predictor screening rules enable fast efficient solutions high-dimensional problems.","code":""},{"path":[]},{"path":"https://jolars.github.io/SLOPE/reference/SLOPE-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SLOPE: Sorted L1 Penalized Estimation — SLOPE-package","text":"Maintainer: Johan Larsson johanlarsson@outlook.com (ORCID) Authors: Jonas Wallin jonas.wallin@stat.lu.se (ORCID) Malgorzata Bogdan Ewout van den Berg Chiara Sabatti Emmanuel Candes Evan Patterson Weijie Su Jakub Kała Krystyna Grzesiak Michal Burdukiewicz (ORCID) contributors: Jerome Friedman (code adapted 'glmnet') [contributor] Trevor Hastie (code adapted 'glmnet') [contributor] Rob Tibshirani (code adapted 'glmnet') [contributor] Balasubramanian Narasimhan (code adapted 'glmnet') [contributor] Noah Simon (code adapted 'glmnet') [contributor] Junyang Qian (code adapted 'glmnet') [contributor] Akarsh Goyal [contributor]","code":""},{"path":"https://jolars.github.io/SLOPE/reference/SLOPE.html","id":null,"dir":"Reference","previous_headings":"","what":"Sorted L-One Penalized Estimation — SLOPE","title":"Sorted L-One Penalized Estimation — SLOPE","text":"Fit generalized linear model regularized sorted L1 norm, applies non-increasing regularization sequence coefficient vector (\\(\\beta\\)) sorted decreasing order according  absolute values.","code":""},{"path":"https://jolars.github.io/SLOPE/reference/SLOPE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sorted L-One Penalized Estimation — SLOPE","text":"","code":"SLOPE(   x,   y,   family = c(\"gaussian\", \"binomial\", \"multinomial\", \"poisson\"),   intercept = TRUE,   center = !inherits(x, \"sparseMatrix\"),   scale = c(\"l2\", \"l1\", \"sd\", \"none\"),   alpha = c(\"path\", \"estimate\"),   lambda = c(\"bh\", \"gaussian\", \"oscar\", \"lasso\"),   alpha_min_ratio = if (NROW(x) < NCOL(x)) 0.01 else 1e-04,   path_length = if (alpha[1] == \"estimate\") 1 else 20,   q = 0.1 * min(1, NROW(x)/NCOL(x)),   theta1 = 1,   theta2 = 0.5,   prox_method = c(\"stack\", \"pava\"),   screen = TRUE,   screen_alg = c(\"strong\", \"previous\"),   tol_dev_change = 1e-05,   tol_dev_ratio = 0.995,   max_variables = NROW(x),   solver = c(\"fista\", \"admm\"),   max_passes = 1e+06,   tol_abs = 1e-05,   tol_rel = 1e-04,   tol_rel_gap = 1e-05,   tol_infeas = 0.001,   tol_rel_coef_change = 0.001,   diagnostics = FALSE,   verbosity = 0,   sigma,   n_sigma,   lambda_min_ratio )"},{"path":"https://jolars.github.io/SLOPE/reference/SLOPE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sorted L-One Penalized Estimation — SLOPE","text":"x design matrix, can either dense matrix standard matrix class, sparse matrix inheriting Matrix::sparseMatrix. Data frames converted matrices internally. y response, family = \"gaussian\" must numeric; family = \"binomial\" family = \"multinomial\", can factor. family model family (objective); see Families details. intercept whether fit intercept center whether center predictors mean. Defaults TRUE x dense FALSE otherwise. scale type scaling apply predictors. \"l1\" scales predictors L1 norms one. \"l2\" scales predictors L2 norms one.#' \"sd\" scales predictors population standard deviation one. \"none\" applies scaling. alpha scale regularization path: either decreasing numeric vector (possibly length 1) character vector; latter case, choices : \"path\", computes regularization sequence first value corresponds intercept-(null) model last almost-saturated model, \"estimate\", estimates single alpha using Algorithm 5 Bogdan et al. (2015). value manually entered alpha, scaled based type standardization applied x. scale = \"l2\", alpha scaled \\(\\sqrt n\\). scale = \"sd\" \"none\", alpha scaled \\(n\\), scale = \"l1\" scaling applied. Note, however, alpha returned resulting value unstandardized alpha. lambda either character vector indicating method used construct lambda path numeric non-decreasing vector length equal number coefficients model; see section Regularization sequences details. alpha_min_ratio smallest value lambda fraction lambda_max; used selection alpha alpha = \"path\". path_length length regularization path; note path returned may still shorter due early termination criteria given tol_dev_change, tol_dev_ratio, max_variables. q parameter controlling shape lambda sequence, usage varying depending type path used effect custom lambda sequence used. Must greater 1e-6 smaller 1. theta1 parameter controlling shape lambda sequence lambda == \"OSCAR\". parameter basically sets intercept lambda sequence equivalent \\(\\lambda_1\\) original OSCAR formulation. theta2 parameter controlling shape lambda sequence lambda == \"OSCAR\". parameter basically sets slope lambda sequence equivalent \\(\\lambda_2\\) original OSCAR formulation. prox_method method calculating proximal operator Sorted L1 Norm (SLOPE penalty). Please see sortedL1Prox() information. screen whether use predictor screening rules (rules allow predictors discarded prior fitting), improve speed greatly number predictors larger number observations. screen_alg type screening algorithm use. \"strong\" uses set strong screening rule check full set \"previous\" first fits previous active set, checks strong set, finally full set violations strong set tol_dev_change regularization path stopped fractional change deviance falls value; note automatically set 0 alpha manually entered tol_dev_ratio regularization path stopped deviance ratio \\(1 - \\mathrm{deviance}/\\mathrm{(null-deviance)}   \\) threshold max_variables criterion stopping path terms maximum number unique, nonzero coefficients absolute value model. multinomial family, value multiplied internally number levels response minus one. solver type solver use, either \"fista\" \"admm\"; families currently support FISTA family = \"gaussian\" supports ADMM. max_passes maximum number passes (outer iterations) solver tol_abs absolute tolerance criterion ADMM solver tol_rel relative tolerance criterion ADMM solver tol_rel_gap stopping criterion duality gap; used FISTA solver. tol_infeas stopping criterion level infeasibility; used FISTA solver KKT checks screening algorithm. tol_rel_coef_change relative tolerance criterion change coefficients iterations, reached maximum absolute change coefficient divided maximum absolute coefficient size less value. diagnostics whether save diagnostics solver (timings values depending type solver) verbosity level verbosity displaying output program. Setting 1 displays basic information path level, 2 little bit information path level, 3 displays information solver. sigma deprecated; please use alpha instead n_sigma deprecated; please use path_length instead lambda_min_ratio deprecated; please use alpha_min_ratio instead","code":""},{"path":"https://jolars.github.io/SLOPE/reference/SLOPE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sorted L-One Penalized Estimation — SLOPE","text":"object class \"SLOPE\" following slots: coefficients three-dimensional array coefficients model fit, including intercept fit. one row coefficient, one column target (dependent variable), one slice penalty. nonzeros three-dimensional logical array indicating whether coefficient zero lambda lambda vector multiplied value alpha gives penalty vector point along regularization path alpha vector giving (unstandardized) scaling lambda sequence class_names character vector giving names classes binomial multinomial families passes number passes solver took step path violations number violations screening rule step path; available diagnostics = TRUE call SLOPE(). active_sets list element indicates indices coefficients active point regularization path unique number unique predictors (absolute value) deviance_ratio deviance ratio (fraction 1) null_deviance deviance null (intercept-) model family name family used model fit diagnostics data.frame objective values primal dual problems, well measure infeasibility, time, iteration; available diagnostics = TRUE call SLOPE(). call call used fitting model","code":""},{"path":"https://jolars.github.io/SLOPE/reference/SLOPE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sorted L-One Penalized Estimation — SLOPE","text":"SLOPE() solves convex minimization problem $$   f(\\beta) + \\alpha \\sum_{=j}^p \\lambda_j |\\beta|_{(j)}, $$ \\(f(\\beta)\\) smooth convex function second part sorted L1-norm. ordinary least-squares regression, \\(f(\\beta)\\) simply squared norm least-squares residuals. See section Families specifics regarding various types \\(f(\\beta)\\) (model families) allowed SLOPE(). default, SLOPE() fits path models, corresponding separate regularization sequence, starting null (intercept-) model almost completely unregularized model. regularization sequences parameterized using \\(\\lambda\\) \\(\\alpha\\), \\(\\alpha\\) varying along path. length path can manually, terminate prematurely depending arguments tol_dev_change, tol_dev_ratio, max_variables. means unless arguments modified, path guaranteed length path_length.","code":""},{"path":"https://jolars.github.io/SLOPE/reference/SLOPE.html","id":"families","dir":"Reference","previous_headings":"","what":"Families","title":"Sorted L-One Penalized Estimation — SLOPE","text":"Gaussian Gaussian model (Ordinary Least Squares) minimizes following objective: $$   \\frac{1}{2} \\Vert y - X\\beta\\Vert_2^2 $$ Binomial binomial model (logistic regression) following objective: $$   \\sum_{=1}^n \\log\\left(1+ \\exp\\left(     - y_i \\left(x_i^T\\beta + \\beta_0 \\right) \\right) \\right) $$ \\(y \\\\{-1, 1\\}\\). Poisson poisson regression, use following objective: $$   -\\sum_{=1}^n \\left(y_i\\left(     x_i^T\\beta + \\beta_0\\right) - \\exp\\left(x_i^T\\beta + \\beta_0   \\right)\\right) $$ Multinomial multinomial regression, minimize full-rank objective $$   -\\sum_{=1}^n\\left(     \\sum_{k=1}^{m-1} y_{ik}(x_i^T\\beta_k + \\beta_{0,k})     - \\log\\sum_{k=1}^{m-1} \\exp\\big(x_i^T\\beta_k + \\beta_{0,k}\\big)   \\right) $$ \\(y_{ik}\\) element \\(n\\) \\((m-1)\\) matrix, \\(m\\) number classes response.","code":""},{"path":"https://jolars.github.io/SLOPE/reference/SLOPE.html","id":"regularization-sequences","dir":"Reference","previous_headings":"","what":"Regularization Sequences","title":"Sorted L-One Penalized Estimation — SLOPE","text":"multiple ways specifying lambda sequence SLOPE(). , first , possible select sequence manually using non-increasing numeric vector, possibly length one, argument instead character. greater differences consecutive values along sequence, clustering behavior model exhibit. Note, also, scale \\(\\lambda\\) vector makes difference alpha = NULL, since alpha selected automatically ensure model completely sparse beginning almost unregularized end. , however, alpha lambda manually specified, scales matter, make sure choose wisely. Instead choosing sequence manually, one following automatically generated sequences may chosen. BH (Benjamini--Hochberg) lambda = \"bh\", sequence used referred \\(\\lambda^{(\\mathrm{BH})}\\) Bogdan et al, sets \\(\\lambda\\) according $$   \\lambda_i = \\Phi^{-1}(1 - iq/(2p)), $$ \\(=1,\\dots,p\\), \\(\\Phi^{-1}\\) quantile function standard normal distribution \\(q\\) parameter can set user call SLOPE(). Gaussian penalty sequence related BH, $$   \\lambda_i = \\lambda^{(\\mathrm{BH})}_i   \\sqrt{1 + w(-1)\\cdot \\mathrm{cumsum}(\\lambda^2)_i}, $$ \\(=1,\\dots,p\\), \\(w(k) = 1/(n-k-1)\\). let \\(\\lambda_1 = \\lambda^{(\\mathrm{BH})}_1\\) adjust sequence make sure non-increasing. Note \\(p\\) large relative \\(n\\), option result constant sequence, usually want. OSCAR sequence comes Bondell Reich linear non-increasing sequence, $$   \\lambda_i = \\theta_1 + (p - )\\theta_2. $$ \\(= 1,\\dots,p\\). use parametrization Zhong Kwok (2021) use \\(\\theta_1\\) \\(\\theta_2\\) instead \\(\\lambda_1\\) \\(\\lambda_2\\) avoid confusion abuse notation. lasso SLOPE exactly equivalent lasso sequence regularization weights constant, .e. $$   \\lambda_i = 1 $$ \\(= 1,\\dots,p\\). , , stress fact \\(\\lambda\\) equal one matter long alpha == NULL since scale vector automatically. Note option academic interest highlight fact SLOPE generalization lasso. efficient packages, glmnet biglasso, fitting lasso.","code":""},{"path":"https://jolars.github.io/SLOPE/reference/SLOPE.html","id":"solvers","dir":"Reference","previous_headings":"","what":"Solvers","title":"Sorted L-One Penalized Estimation — SLOPE","text":"currently two solvers available SLOPE: FISTA (Beck Teboulle 2009) ADMM (Boyd et al. 2008). FISTA available families ADMM currently available family = \"gaussian\".","code":""},{"path":"https://jolars.github.io/SLOPE/reference/SLOPE.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sorted L-One Penalized Estimation — SLOPE","text":"Bogdan, M., van den Berg, E., Sabatti, C., Su, W., & Candès, E. J. (2015). SLOPE -- adaptive variable selection via convex optimization. Annals Applied Statistics, 9(3), 1103–1140. Bondell, H. D., & Reich, B. J. (2008). Simultaneous Regression Shrinkage, Variable Selection, Supervised Clustering Predictors OSCAR. Biometrics, 64(1), 115–123. JSTOR. Boyd, S., Parikh, N., Chu, E., Peleato, B., & Eckstein, J. (2010). Distributed Optimization Statistical Learning via Alternating Direction Method Multipliers. Foundations Trends® Machine Learning, 3(1), 1–122. Beck, ., & Teboulle, M. (2009). Fast Iterative Shrinkage-Thresholding Algorithm Linear Inverse Problems. SIAM Journal Imaging Sciences, 2(1), 183–202.","code":""},{"path":[]},{"path":"https://jolars.github.io/SLOPE/reference/SLOPE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sorted L-One Penalized Estimation — SLOPE","text":"","code":"# Gaussian response, default lambda sequence fit <- SLOPE(bodyfat$x, bodyfat$y)  # Poisson response, OSCAR-type lambda sequence fit <- SLOPE(   abalone$x,   abalone$y,   family = \"poisson\",   lambda = \"oscar\",   theta1 = 1,   theta2 = 0.9 )  # Multinomial response, custom alpha and lambda m <- length(unique(wine$y)) - 1 p <- ncol(wine$x)  alpha <- 0.005 lambda <- exp(seq(log(2), log(1.8), length.out = p * m))  fit <- SLOPE(   wine$x,   wine$y,   family = \"multinomial\",   lambda = lambda,   alpha = alpha )"},{"path":"https://jolars.github.io/SLOPE/reference/abalone.html","id":null,"dir":"Reference","previous_headings":"","what":"Abalone — abalone","title":"Abalone — abalone","text":"data set contains observations abalones, common name group sea snails. goal predict age individual abalone given physical measurements sex, weight, height.","code":""},{"path":"https://jolars.github.io/SLOPE/reference/abalone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Abalone — abalone","text":"","code":"abalone"},{"path":"https://jolars.github.io/SLOPE/reference/abalone.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Abalone — abalone","text":"list two items representing 211 observations 9 variables sex sex abalone, 1 female infant indicates person infant length longest shell measurement mm diameter perpendicular length mm height height mm including meat shell weight_whole weight entire abalone weight_shucked weight meat weight_viscera weight viscera weight_shell weight shell rings rings. +1.5 gives age years","code":""},{"path":"https://jolars.github.io/SLOPE/reference/abalone.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Abalone — abalone","text":"Pace, R. Kelley Ronald Barry, Sparse Spatial Autoregressions, Statistics Probability Letters, 33 (1997) 291-297.","code":""},{"path":"https://jolars.github.io/SLOPE/reference/abalone.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Abalone — abalone","text":"stratified sample 211 rows original data set used .","code":""},{"path":[]},{"path":"https://jolars.github.io/SLOPE/reference/bodyfat.html","id":null,"dir":"Reference","previous_headings":"","what":"Bodyfat — bodyfat","title":"Bodyfat — bodyfat","text":"response (y) corresponds estimates percentage body fat application Siri's 1956 equation measurements underwater weighing, well age, weight, height, variety body circumference measurements.","code":""},{"path":"https://jolars.github.io/SLOPE/reference/bodyfat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bodyfat — bodyfat","text":"","code":"bodyfat"},{"path":"https://jolars.github.io/SLOPE/reference/bodyfat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Bodyfat — bodyfat","text":"list two items representing 252 observations 14 variables age age (years) weight weight (lbs) height height (inches) neck neck circumference (cm) chest chest circumference (cm) abdomen abdomen circumference (cm) hip hip circumference (cm) thigh thigh circumference (cm) knee knee circumference (cm) ankle ankle circumference (cm) biceps biceps circumference (cm) forearm forearm circumference (cm) wrist wrist circumference (cm)","code":""},{"path":"https://jolars.github.io/SLOPE/reference/bodyfat.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Bodyfat — bodyfat","text":"http://lib.stat.cmu.edu/datasets/bodyfat https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/regression.html","code":""},{"path":[]},{"path":"https://jolars.github.io/SLOPE/reference/caretSLOPE.html","id":null,"dir":"Reference","previous_headings":"","what":"Model objects for model tuning with caret (deprecated) — caretSLOPE","title":"Model objects for model tuning with caret (deprecated) — caretSLOPE","text":"function can used call caret::train() enable model tuning using caret. Note function properly work sparse feature matrices standardization due way resampling implemented caret. cases, please check trainSLOPE() instead.","code":""},{"path":"https://jolars.github.io/SLOPE/reference/caretSLOPE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model objects for model tuning with caret (deprecated) — caretSLOPE","text":"","code":"caretSLOPE()"},{"path":"https://jolars.github.io/SLOPE/reference/caretSLOPE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model objects for model tuning with caret (deprecated) — caretSLOPE","text":"model description list used method argument caret::train().","code":""},{"path":[]},{"path":"https://jolars.github.io/SLOPE/reference/coef.SLOPE.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain coefficients — coef.SLOPE","title":"Obtain coefficients — coef.SLOPE","text":"function returns coefficients model fit SLOPE().","code":""},{"path":"https://jolars.github.io/SLOPE/reference/coef.SLOPE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain coefficients — coef.SLOPE","text":"","code":"# S3 method for SLOPE coef(object, alpha = NULL, exact = FALSE, simplify = TRUE, sigma, ...)"},{"path":"https://jolars.github.io/SLOPE/reference/coef.SLOPE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain coefficients — coef.SLOPE","text":"object object class 'SLOPE'. alpha penalty parameter SLOPE models; NULL, values used original fit used exact TRUE given parameter values differ original fit, model refit calling stats::update() object new parameters. FALSE, predicted values based interpolated coefficients original penalty path. simplify TRUE, base::drop() called returning coefficients drop extraneous dimensions sigma deprecated. Please use alpha instead. ... arguments passed stats::update() (therefore also SLOPE()) exact = TRUE given penalty object","code":""},{"path":"https://jolars.github.io/SLOPE/reference/coef.SLOPE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain coefficients — coef.SLOPE","text":"Coefficients model.","code":""},{"path":"https://jolars.github.io/SLOPE/reference/coef.SLOPE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Obtain coefficients — coef.SLOPE","text":"exact = FALSE alpha object, returned coefficients approximated linear interpolation. coefficients another type penalty sequence (different lambda) required, however, please use SLOPE() refit model.","code":""},{"path":[]},{"path":"https://jolars.github.io/SLOPE/reference/coef.SLOPE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain coefficients — coef.SLOPE","text":"","code":"fit <- SLOPE(mtcars$mpg, mtcars$vs, path_length = 1) coef(fit) #> (Intercept)          V1  #> -0.67805384  0.05552609"},{"path":"https://jolars.github.io/SLOPE/reference/deviance.SLOPE.html","id":null,"dir":"Reference","previous_headings":"","what":"Model deviance — deviance.SLOPE","title":"Model deviance — deviance.SLOPE","text":"Model deviance","code":""},{"path":"https://jolars.github.io/SLOPE/reference/deviance.SLOPE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model deviance — deviance.SLOPE","text":"","code":"# S3 method for SLOPE deviance(object, ...)"},{"path":"https://jolars.github.io/SLOPE/reference/deviance.SLOPE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model deviance — deviance.SLOPE","text":"object object class 'SLOPE'. ... ignored","code":""},{"path":"https://jolars.github.io/SLOPE/reference/deviance.SLOPE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model deviance — deviance.SLOPE","text":"Gaussian models twice residual sums squares. models, two times negative loglikelihood returned.","code":""},{"path":[]},{"path":"https://jolars.github.io/SLOPE/reference/deviance.SLOPE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model deviance — deviance.SLOPE","text":"","code":"fit <- SLOPE(abalone$x, abalone$y, family = \"poisson\") deviance(fit) #>  [1] 1037.0277  997.7979  979.7133  971.3346  967.2121  955.4363  949.2969 #>  [8]  946.7080  944.4784  942.5502  941.6779  941.2731  941.1136  941.0527 #> [15]  941.0286  941.0196"},{"path":"https://jolars.github.io/SLOPE/reference/heart.html","id":null,"dir":"Reference","previous_headings":"","what":"Heart disease — heart","title":"Heart disease — heart","text":"Diagnostic attributes patients classified heart disease .","code":""},{"path":"https://jolars.github.io/SLOPE/reference/heart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heart disease — heart","text":"","code":"heart"},{"path":"https://jolars.github.io/SLOPE/reference/heart.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Heart disease — heart","text":"270 observations 17 variables represented list consisting binary factor response vector y, levels 'absence' 'presence' indicating absence presence heart disease x: sparse feature matrix class 'dgCMatrix' following variables: age age bp diastolic blood pressure chol serum cholesterol mg/dl hr maximum heart rate achieved old_peak ST depression induced exercise relative rest vessels number major blood vessels (0 3) colored fluoroscopy sex sex participant: 0 male, 1 female angina dummy variable indicating whether person suffered angina-pectoris exercise glucose_high indicates fasting blood sugar 120 mg/dl cp_typical typical angina cp_atypical atypical angina cp_nonanginal non-anginal pain ecg_abnormal indicates ST-T wave abnormality (T wave inversions /ST elevation depression > 0.05 mV) ecg_estes probable definite left ventricular hypertrophy Estes' criteria slope_flat flat ST curve peak exercise slope_downsloping downwards-sloping ST curve peak exercise thal_reversible reversible defect thal_fixed fixed defect","code":""},{"path":"https://jolars.github.io/SLOPE/reference/heart.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Heart disease — heart","text":"Dua, D. Karra Taniskidou, E. (2017). UCI Machine Learning Repository http://archive.ics.uci.edu/ml/. Irvine, CA: University California, School Information Computer Science. https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/binary.html#heart","code":""},{"path":"https://jolars.github.io/SLOPE/reference/heart.html","id":"preprocessing","dir":"Reference","previous_headings":"","what":"Preprocessing","title":"Heart disease — heart","text":"original dataset contained 13 variables. nominal dummycoded, removing first category. precise information regarding variables chest_pain, thal ecg found, explains obscure definitions .","code":""},{"path":[]},{"path":"https://jolars.github.io/SLOPE/reference/interpolateCoefficients.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate coefficients — interpolateCoefficients","title":"Interpolate coefficients — interpolateCoefficients","text":"Interpolate coefficients","code":""},{"path":"https://jolars.github.io/SLOPE/reference/interpolateCoefficients.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate coefficients — interpolateCoefficients","text":"","code":"interpolateCoefficients(beta, interpolation_list)"},{"path":"https://jolars.github.io/SLOPE/reference/interpolateCoefficients.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate coefficients — interpolateCoefficients","text":"beta coefficients interpolation_list list generated interpolatePenalty()","code":""},{"path":"https://jolars.github.io/SLOPE/reference/interpolateCoefficients.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpolate coefficients — interpolateCoefficients","text":"matrix (list matrices) new coefficients based linearly interpolating new old lambda values.","code":""},{"path":"https://jolars.github.io/SLOPE/reference/interpolatePenalty.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate penalty values — interpolatePenalty","title":"Interpolate penalty values — interpolatePenalty","text":"Interpolate penalty values","code":""},{"path":"https://jolars.github.io/SLOPE/reference/interpolatePenalty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate penalty values — interpolatePenalty","text":"","code":"interpolatePenalty(penalty, x)"},{"path":"https://jolars.github.io/SLOPE/reference/interpolatePenalty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate penalty values — interpolatePenalty","text":"penalty current penalty sequence x new sequence","code":""},{"path":"https://jolars.github.io/SLOPE/reference/interpolatePenalty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpolate penalty values — interpolatePenalty","text":"Interpolated values lambda","code":""},{"path":"https://jolars.github.io/SLOPE/reference/interpolatePenalty.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Interpolate penalty values — interpolatePenalty","text":"Jerome Friedman, Trevor Hastie, Rob Tibshirani, Noah Simon","code":""},{"path":"https://jolars.github.io/SLOPE/reference/plot.SLOPE.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot coefficients — plot.SLOPE","title":"Plot coefficients — plot.SLOPE","text":"Plot fitted model's regression coefficients along regularization path.","code":""},{"path":"https://jolars.github.io/SLOPE/reference/plot.SLOPE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot coefficients — plot.SLOPE","text":"","code":"# S3 method for SLOPE plot(   x,   intercept = FALSE,   x_variable = c(\"alpha\", \"deviance_ratio\", \"step\"),   ... )"},{"path":"https://jolars.github.io/SLOPE/reference/plot.SLOPE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot coefficients — plot.SLOPE","text":"x object class \"SLOPE\" intercept whether plot intercept x_variable plot x axis. \"alpha\" plots scaling parameter sequence, \"deviance_ratio\" plots fraction deviance explained, \"step\" plots step number. ... arguments passed methods.","code":""},{"path":"https://jolars.github.io/SLOPE/reference/plot.SLOPE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot coefficients — plot.SLOPE","text":"object class \"ggplot\", plotted current device unless stored variable.","code":""},{"path":[]},{"path":"https://jolars.github.io/SLOPE/reference/plot.SLOPE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot coefficients — plot.SLOPE","text":"","code":"fit <- SLOPE(heart$x, heart$y) plot(fit)"},{"path":"https://jolars.github.io/SLOPE/reference/plot.TrainedSLOPE.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot results from cross-validation — plot.TrainedSLOPE","title":"Plot results from cross-validation — plot.TrainedSLOPE","text":"Plot results cross-validation","code":""},{"path":"https://jolars.github.io/SLOPE/reference/plot.TrainedSLOPE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot results from cross-validation — plot.TrainedSLOPE","text":"","code":"# S3 method for TrainedSLOPE plot(   x,   measure = c(\"auto\", \"mse\", \"mae\", \"deviance\", \"auc\", \"misclass\"),   plot_min = TRUE,   ci_alpha = 0.2,   ci_border = FALSE,   ci_col = \"salmon\",   ... )"},{"path":"https://jolars.github.io/SLOPE/reference/plot.TrainedSLOPE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot results from cross-validation — plot.TrainedSLOPE","text":"x object class 'TrainedSLOPE', typically call trainSLOPE() measure measures used call trainSLOPE(). measure = \"auto\" deviance used binomial multinomial models, whilst mean-squared error used Gaussian Poisson models. plot_min whether mark location penalty corresponding best prediction score ci_alpha alpha (opacity) fill confidence limits ci_border color (flag turn ) border confidence limits ci_col color border confidence limits ... words","code":""},{"path":"https://jolars.github.io/SLOPE/reference/plot.TrainedSLOPE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot results from cross-validation — plot.TrainedSLOPE","text":"object class \"ggplot\", plotted current device unless stored variable.","code":""},{"path":[]},{"path":"https://jolars.github.io/SLOPE/reference/plot.TrainedSLOPE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot results from cross-validation — plot.TrainedSLOPE","text":"","code":"# Cross-validation for a SLOPE binomial model set.seed(123) tune <- trainSLOPE(subset(mtcars, select = c(\"mpg\", \"drat\", \"wt\")),   mtcars$hp,   q = c(0.1, 0.2),   number = 10 ) plot(tune, ci_col = \"salmon\")"},{"path":"https://jolars.github.io/SLOPE/reference/plotDiagnostics.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot results from diagnostics collected during model fitting — plotDiagnostics","title":"Plot results from diagnostics collected during model fitting — plotDiagnostics","text":"function plots various diagnostics collected model fitting resulting call SLOPE() provided diagnostics = TRUE.","code":""},{"path":"https://jolars.github.io/SLOPE/reference/plotDiagnostics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot results from diagnostics collected during model fitting — plotDiagnostics","text":"","code":"plotDiagnostics(   object,   ind = max(object$diagnostics$penalty),   xvar = c(\"time\", \"iteration\") )"},{"path":"https://jolars.github.io/SLOPE/reference/plotDiagnostics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot results from diagnostics collected during model fitting — plotDiagnostics","text":"object object class \"SLOPE\". ind either \"last\" xvar place x axis. iteration plots iteration, time plots wall-clock time.","code":""},{"path":"https://jolars.github.io/SLOPE/reference/plotDiagnostics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot results from diagnostics collected during model fitting — plotDiagnostics","text":"object class \"ggplot\", plotted current device unless stored variable.","code":""},{"path":[]},{"path":"https://jolars.github.io/SLOPE/reference/plotDiagnostics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot results from diagnostics collected during model fitting — plotDiagnostics","text":"","code":"x <- SLOPE(abalone$x, abalone$y, diagnostics = TRUE) plotDiagnostics(x)"},{"path":"https://jolars.github.io/SLOPE/reference/predict.SLOPE.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate predictions from SLOPE models — predict.SLOPE","title":"Generate predictions from SLOPE models — predict.SLOPE","text":"Return predictions models fit SLOPE().","code":""},{"path":"https://jolars.github.io/SLOPE/reference/predict.SLOPE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate predictions from SLOPE models — predict.SLOPE","text":"","code":"# S3 method for SLOPE predict(object, x, alpha = NULL, type = \"link\", simplify = TRUE, sigma, ...)  # S3 method for GaussianSLOPE predict(   object,   x,   sigma = NULL,   type = c(\"link\", \"response\"),   simplify = TRUE,   ... )  # S3 method for BinomialSLOPE predict(   object,   x,   sigma = NULL,   type = c(\"link\", \"response\", \"class\"),   simplify = TRUE,   ... )  # S3 method for PoissonSLOPE predict(   object,   x,   sigma = NULL,   type = c(\"link\", \"response\"),   exact = FALSE,   simplify = TRUE,   ... )  # S3 method for MultinomialSLOPE predict(   object,   x,   sigma = NULL,   type = c(\"link\", \"response\", \"class\"),   exact = FALSE,   simplify = TRUE,   ... )"},{"path":"https://jolars.github.io/SLOPE/reference/predict.SLOPE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate predictions from SLOPE models — predict.SLOPE","text":"object object class \"SLOPE\", typically result call SLOPE() x new data alpha penalty parameter SLOPE models; NULL, values used original fit used type type prediction; \"link\" returns linear predictors, \"response\" returns result applying link function, \"class\" returns class predictions. simplify TRUE, base::drop() called returning coefficients drop extraneous dimensions sigma deprecated. Please use alpha instead. ... ignored method consistency exact TRUE given parameter values differ original fit, model refit calling stats::update() object new parameters. FALSE, predicted values based interpolated coefficients original penalty path.","code":""},{"path":"https://jolars.github.io/SLOPE/reference/predict.SLOPE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate predictions from SLOPE models — predict.SLOPE","text":"Predictions model scale determined type.","code":""},{"path":[]},{"path":"https://jolars.github.io/SLOPE/reference/predict.SLOPE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate predictions from SLOPE models — predict.SLOPE","text":"","code":"fit <- with(mtcars, SLOPE(cbind(mpg, hp), vs, family = \"binomial\")) predict(fit, with(mtcars, cbind(mpg, hp)), type = \"class},{"path":"https://jolars.github.io/SLOPE/reference/print.SLOPE.html","id":null,"dir":"Reference","previous_headings":"","what":"Print results from SLOPE fit — print.SLOPE","title":"Print results from SLOPE fit — print.SLOPE","text":"Print results SLOPE fit","code":""},{"path":"https://jolars.github.io/SLOPE/reference/print.SLOPE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print results from SLOPE fit — print.SLOPE","text":"","code":"# S3 method for SLOPE print(x, ...)  # S3 method for TrainedSLOPE print(x, ...)"},{"path":"https://jolars.github.io/SLOPE/reference/print.SLOPE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print results from SLOPE fit — print.SLOPE","text":"x object class 'SLOPE' 'TrainedSLOPE' ... arguments passed print()","code":""},{"path":"https://jolars.github.io/SLOPE/reference/print.SLOPE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print results from SLOPE fit — print.SLOPE","text":"Prints output screen","code":""},{"path":[]},{"path":"https://jolars.github.io/SLOPE/reference/print.SLOPE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print results from SLOPE fit — print.SLOPE","text":"","code":"fit <- SLOPE(wine$x, wine$y, family = \"multinomial\") print(fit, digits = 1) #>  #> Call: #> SLOPE(x = wine$x, y = wine$y, family = \"multinomial\") #>  #> Path summary: #>    alpha deviance_ratio n_nonzero #> 1  1e-01           0.01         1 #> 2  8e-02           0.35         4 #> 3  5e-02           0.56        11 #> 4  3e-02           0.72        14 #> 5  2e-02           0.81        15 #> 6  1e-02           0.87        16 #> 7  7e-03           0.91        16 #> 8  5e-03           0.94        17 #> 9  3e-03           0.96        19 #> 10 2e-03           0.97        18 #> 11 1e-03           0.98        18 #> 12 7e-04           0.99        18 #> 13 4e-04           0.99        18 #> 14 2e-04           0.99        19 #> 15 2e-04           1.00        19"},{"path":"https://jolars.github.io/SLOPE/reference/regularizationWeights.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Regularization (Penalty) Weights for SLOPE — regularizationWeights","title":"Generate Regularization (Penalty) Weights for SLOPE — regularizationWeights","text":"function generates sequences regularizations weights use SLOPE() (elsewhere).","code":""},{"path":"https://jolars.github.io/SLOPE/reference/regularizationWeights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Regularization (Penalty) Weights for SLOPE — regularizationWeights","text":"","code":"regularizationWeights(   n_lambda = 100,   type = c(\"bh\", \"gaussian\", \"oscar\", \"lasso\"),   q = 0.2,   theta1 = 1,   theta2 = 0.5,   n = NULL )"},{"path":"https://jolars.github.io/SLOPE/reference/regularizationWeights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Regularization (Penalty) Weights for SLOPE — regularizationWeights","text":"n_lambda number lambdas generate. typically equal number predictors data set. type type lambda sequence use. See documentation SLOPE(), including related lambda parameter function. q parameter controlling shape lambda sequence, usage varying depending type path used effect custom lambda sequence used. Must greater 1e-6 smaller 1. theta1 parameter controlling shape lambda sequence lambda == \"OSCAR\". parameter basically sets intercept lambda sequence equivalent \\(\\lambda_1\\) original OSCAR formulation. theta2 parameter controlling shape lambda sequence lambda == \"OSCAR\". parameter basically sets slope lambda sequence equivalent \\(\\lambda_2\\) original OSCAR formulation. n number rows (observations) design matrix.","code":""},{"path":"https://jolars.github.io/SLOPE/reference/regularizationWeights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Regularization (Penalty) Weights for SLOPE — regularizationWeights","text":"vector length n_lambda regularization weights.","code":""},{"path":"https://jolars.github.io/SLOPE/reference/regularizationWeights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Regularization (Penalty) Weights for SLOPE — regularizationWeights","text":"Please see SLOPE() detailed information regarding parameters function, particular section Regularization Sequences. Note sequences automatically scaled (unless value alpha parameter manually supplied) using SLOPE(). function, nu scaling attempted.","code":""},{"path":[]},{"path":"https://jolars.github.io/SLOPE/reference/regularizationWeights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Regularization (Penalty) Weights for SLOPE — regularizationWeights","text":"","code":"# compute different penalization sequences bh <- regularizationWeights(100, q = 0.2, type = \"bh\")  gaussian <- regularizationWeights(   100,   q = 0.2,   n = 300,   type = \"gaussian\" )  oscar <- regularizationWeights(   100,   theta1 = 1.284,   theta2 = 0.0182,   type = \"oscar\" )  lasso <- regularizationWeights(100, type = \"lasso\") * mean(oscar)  # Plot a comparison between these sequences plot(bh, type = \"l\", ylab = expression(lambda)) lines(gaussian, col = \"dark orange\") lines(oscar, col = \"navy\") lines(lasso, col = \"red3\")  legend(   \"topright\",   legend = c(\"BH\", \"Gaussian\", \"OSCAR\", \"lasso\"),   col = c(\"black\", \"dark orange\", \"navy\", \"red3\"),   lty = 1 )"},{"path":"https://jolars.github.io/SLOPE/reference/score.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute one of several loss metrics on a new data set — score","title":"Compute one of several loss metrics on a new data set — score","text":"function unified interface return various types loss model fit SLOPE().","code":""},{"path":"https://jolars.github.io/SLOPE/reference/score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute one of several loss metrics on a new data set — score","text":"","code":"score(object, x, y, measure)  # S3 method for GaussianSLOPE score(object, x, y, measure = c(\"mse\", \"mae\"))  # S3 method for BinomialSLOPE score(object, x, y, measure = c(\"mse\", \"mae\", \"deviance\", \"misclass\", \"auc\"))  # S3 method for MultinomialSLOPE score(object, x, y, measure = c(\"mse\", \"mae\", \"deviance\", \"misclass\"))  # S3 method for PoissonSLOPE score(object, x, y, measure = c(\"mse\", \"mae\"))"},{"path":"https://jolars.github.io/SLOPE/reference/score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute one of several loss metrics on a new data set — score","text":"object object class \"SLOPE\" x feature matrix y response measure type target measure. \"mse\" returns mean squared error. \"mae\" returns mean absolute error, \"misclass\" returns misclassification rate, \"auc\" returns area ROC curve.","code":""},{"path":"https://jolars.github.io/SLOPE/reference/score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute one of several loss metrics on a new data set — score","text":"measure along regularization path depending value measure.#'","code":""},{"path":[]},{"path":"https://jolars.github.io/SLOPE/reference/score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute one of several loss metrics on a new data set — score","text":"","code":"x <- subset(infert, select = c(\"induced\", \"age\", \"pooled.stratum\")) y <- infert$case  fit <- SLOPE(x, y, family = \"binomial\") score(fit, x, y, measure = \"auc\") #>        p1        p2        p3        p4        p5        p6  #> 0.5150055 0.4921504 0.4952903 0.5025192 0.5090179 0.5101132"},{"path":"https://jolars.github.io/SLOPE/reference/setupDiagnostics.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup a data.frame of diagnostics — setupDiagnostics","title":"Setup a data.frame of diagnostics — setupDiagnostics","text":"Setup data.frame diagnostics","code":""},{"path":"https://jolars.github.io/SLOPE/reference/setupDiagnostics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup a data.frame of diagnostics — setupDiagnostics","text":"","code":"setupDiagnostics(res)"},{"path":"https://jolars.github.io/SLOPE/reference/setupDiagnostics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup a data.frame of diagnostics — setupDiagnostics","text":"res result calling C++ routine used fit model SLOPE","code":""},{"path":"https://jolars.github.io/SLOPE/reference/setupDiagnostics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup a data.frame of diagnostics — setupDiagnostics","text":"data.frame","code":""},{"path":"https://jolars.github.io/SLOPE/reference/sortedL1Prox.html","id":null,"dir":"Reference","previous_headings":"","what":"Sorted L1 Proximal Operator — sortedL1Prox","title":"Sorted L1 Proximal Operator — sortedL1Prox","text":"proximal operator Sorted L1 Norm, penalty function SLOPE. solves problem $$   \\arg\\,\\min_x     \\Big(J(x, \\lambda) + \\frac{1}{2} ||x - v||_2^2\\Big) $$ \\(J(x, \\lambda)\\) Sorted L1 Norm.","code":""},{"path":"https://jolars.github.io/SLOPE/reference/sortedL1Prox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sorted L1 Proximal Operator — sortedL1Prox","text":"","code":"sortedL1Prox(x, lambda, method = c(\"stack\", \"pava\"))"},{"path":"https://jolars.github.io/SLOPE/reference/sortedL1Prox.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sorted L1 Proximal Operator — sortedL1Prox","text":"M. Bogdan, E. van den Berg, Chiara Sabatti, Weijie Su, Emmanuel J. Candès, “SLOPE – adaptive variable selection via convex optimization,” Ann Appl Stat, vol. 9, . 3, pp. 1103–1140, 2015.","code":""},{"path":"https://jolars.github.io/SLOPE/reference/sortedL1Prox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sorted L1 Proximal Operator — sortedL1Prox","text":"x vector. SLOPE, vector coefficients. lambda non-negative decreasing sequence weights Sorted L1 Norm. Needs length x. method Method used prox. \"stack\" stack-based algorithm (Algorithm 4 Bogdan et al.). \"pava\" PAVA algorithm used isotonic regression (also Algorithm 3 Bogdan et al.).","code":""},{"path":"https://jolars.github.io/SLOPE/reference/sortedL1Prox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sorted L1 Proximal Operator — sortedL1Prox","text":"evaluation proximal operator x lambda.","code":""},{"path":"https://jolars.github.io/SLOPE/reference/student.html","id":null,"dir":"Reference","previous_headings":"","what":"Student performance — student","title":"Student performance — student","text":"data set attributes 382 students secondary education collected two schools. goal predict grade math Portugese end third period. See cited sources additional information.","code":""},{"path":"https://jolars.github.io/SLOPE/reference/student.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Student performance — student","text":"","code":"student"},{"path":"https://jolars.github.io/SLOPE/reference/student.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Student performance — student","text":"382 observations 13 variables represented list consisting binary factor response matrix y two responses: portugese math final scores period three respective subjects. list also contains x: sparse feature matrix class 'dgCMatrix' following variables: school_ms student's primary school, 1 Mousinho da Silveira 0 Gabriel Pereira sex sex student, 1 male age age student urban urban (1) rural (0) home address large_family whether family size larger 3 cohabitation whether parents live together Medu mother's level education (ordered) Fedu fathers's level education (ordered) Mjob_health whether mother employed health care Mjob_other whether mother employed something specified job roles Mjob_services whether mother employed service sector Mjob_teacher whether mother employed teacher Fjob_health whether father employed health care Fjob_other whether father employed something specified job roles Fjob_services whether father employed service sector Fjob_teacher whether father employed teacher reason_home school chosen close home reason_other school chosen another reason reason_rep school chosen reputation nursery whether student attended nursery school internet Pwhether student internet access home","code":""},{"path":"https://jolars.github.io/SLOPE/reference/student.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Student performance — student","text":"P. Cortez . Silva. Using Data Mining Predict Secondary School Student Performance. . Brito J. Teixeira Eds., Proceedings 5th FUture BUsiness TEChnology Conference (FUBUTEC 2008) pp. 5-12, Porto, Portugal, April, 2008, EUROSIS, ISBN 978-9077381-39-7. http://www3.dsi.uminho.pt/pcortez/student.pdf Dua, D. Karra Taniskidou, E. (2017). UCI Machine Learning Repository http://archive.ics.uci.edu/ml/. Irvine, CA: University California, School Information Computer Science.","code":""},{"path":"https://jolars.github.io/SLOPE/reference/student.html","id":"preprocessing","dir":"Reference","previous_headings":"","what":"Preprocessing","title":"Student performance — student","text":"grade-specific predictors dropped data set. (Note clear source predictors specific grade, parent student's guardian.) categorical variables dummy-coded. final grades (G3) kept dependent variables, whilst first second period grades dropped.","code":""},{"path":[]},{"path":"https://jolars.github.io/SLOPE/reference/trainSLOPE.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a SLOPE model — trainSLOPE","title":"Train a SLOPE model — trainSLOPE","text":"function trains model fit SLOPE() tuning parameters cross-validation.","code":""},{"path":"https://jolars.github.io/SLOPE/reference/trainSLOPE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a SLOPE model — trainSLOPE","text":"","code":"trainSLOPE(   x,   y,   q = 0.2,   number = 10,   repeats = 1,   measure = c(\"mse\", \"mae\", \"deviance\", \"misclass\", \"auc\"),   ... )"},{"path":"https://jolars.github.io/SLOPE/reference/trainSLOPE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a SLOPE model — trainSLOPE","text":"x design matrix, can either dense matrix standard matrix class, sparse matrix inheriting Matrix::sparseMatrix. Data frames converted matrices internally. y response, family = \"gaussian\" must numeric; family = \"binomial\" family = \"multinomial\", can factor. q parameter controlling shape lambda sequence, usage varying depending type path used effect custom lambda sequence used. Must greater 1e-6 smaller 1. number number folds (cross-validation) repeats number repeats fold (repeated k-fold cross validation) measure measure try optimize; note may supply multiple values , default, possible measures given model used. ... arguments pass SLOPE()","code":""},{"path":"https://jolars.github.io/SLOPE/reference/trainSLOPE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a SLOPE model — trainSLOPE","text":"object class \"TrainedSLOPE\", following slots: summary summary results means, standard errors, 0.95 confidence levels data raw data model training optima data.frame best (mean) values different metrics corresponding parameter values measure data.frame listing used metrics labels model model fit entire data set call call","code":""},{"path":"https://jolars.github.io/SLOPE/reference/trainSLOPE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Train a SLOPE model — trainSLOPE","text":"Note default method matches available metrics given model family provided argument measure. Collecting measures particularly demanding computationally almost always best leave argument choose argument focus call plot.TrainedSLOPE().","code":""},{"path":"https://jolars.github.io/SLOPE/reference/trainSLOPE.html","id":"parallel-operation","dir":"Reference","previous_headings":"","what":"Parallel operation","title":"Train a SLOPE model — trainSLOPE","text":"function uses foreach package enable parallel operation. enable , simply register parallel backend using, instance, doParallel::registerDoParallel() doParallel package running function.","code":""},{"path":[]},{"path":"https://jolars.github.io/SLOPE/reference/trainSLOPE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train a SLOPE model — trainSLOPE","text":"","code":"# 8-fold cross-validation repeated 5 times tune <- trainSLOPE(subset(mtcars, select = c(\"mpg\", \"drat\", \"wt\")),   mtcars$hp,   q = c(0.1, 0.2),   number = 8,   repeats = 5,   measure = \"mse\" )"},{"path":"https://jolars.github.io/SLOPE/reference/wine.html","id":null,"dir":"Reference","previous_headings":"","what":"Wine cultivars — wine","title":"Wine cultivars — wine","text":"data set results chemical analysis wines grown Italy three different cultivars.","code":""},{"path":"https://jolars.github.io/SLOPE/reference/wine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wine cultivars — wine","text":"","code":"wine"},{"path":"https://jolars.github.io/SLOPE/reference/wine.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wine cultivars — wine","text":"178 observations 13 variables represented list consisting categorical response vector y three levels: , B, C representing different cultivars wine well x: sparse feature matrix class 'dgCMatrix' following variables: alcohol alcoholic content malic malic acid ash ash alcalinity alcalinity ash magnesium magnemium phenols total phenols flavanoids flavanoids nonflavanoids nonflavanoid phenols proanthocyanins proanthocyanins color color intensity hue hue dilution OD280/OD315 diluted wines proline proline","code":""},{"path":"https://jolars.github.io/SLOPE/reference/wine.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Wine cultivars — wine","text":"Dua, D. Karra Taniskidou, E. (2017). UCI Machine Learning Repository http://archive.ics.uci.edu/ml/. Irvine, CA: University California, School Information Computer Science. https://raw.githubusercontent.com/hadley/rminds/master/1-data/wine.csv https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multiclass.html#wine","code":""},{"path":[]}]
